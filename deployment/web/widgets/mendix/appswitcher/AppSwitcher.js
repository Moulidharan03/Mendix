
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
define(['react'], (function (React) { 'use strict';

    

    function ___$insertStyle(css) {
        if (!css || typeof window === 'undefined') {
            return;
        }
        const style = document.createElement('style');
        style.setAttribute('type', 'text/css');
        style.innerHTML = css;
        document.head.appendChild(style);
        return css;
    }

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

    const ExternalLinkIcon = ({ strokeColor, width = 20, height = 20, className = "" }) => (React.createElement("svg", { className: className, width: width, height: height, viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        React.createElement("path", { d: "M15 10.8333V15.8333C15 16.2754 14.8244 16.6993 14.5118 17.0118C14.1993 17.3244 13.7754 17.5 13.3333 17.5H4.16667C3.72464 17.5 3.30072 17.3244 2.98816 17.0118C2.67559 16.6993 2.5 16.2754 2.5 15.8333V6.66667C2.5 6.22464 2.67559 5.80072 2.98816 5.48816C3.30072 5.17559 3.72464 5 4.16667 5H9.16667", stroke: strokeColor, strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        React.createElement("path", { d: "M12.5 2.5H17.5V7.5", stroke: "white", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        React.createElement("path", { d: "M8.33337 11.6667L17.5 2.5", stroke: strokeColor, strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })));

    const AppLisItem = ({ data }) => {
        return (React.createElement("a", { href: data.appURL, className: "appsw_list__link-wrapper" },
            React.createElement("div", { className: "appsw_list__item", key: data.appId },
                React.createElement("img", { className: "appsw_item__image", width: "20", height: "20", src: Object.prototype.hasOwnProperty.call(data, "appLogo")
                        ? data.appLogo
                        : "./img/AppSwitcherModule$Images$Mendix_logo.svg" }),
                React.createElement("span", { className: "appsw_item__name" }, data.appName),
                React.createElement("a", { href: data.appURL, className: "appsw_list__link-wrapper", target: "_blank", rel: "noreferrer" },
                    React.createElement(ExternalLinkIcon, { className: "appsw_item__external-link", strokeColor: "#FFF" })))));
    };

    const ForceRefreshIcon = ({ strokeColor, width = 20, height = 20, className = "" }) => (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", width: width, height: height, className: className, viewBox: "0 0 20 20" },
        React.createElement("path", { d: "M19.167 3.333v5h-5", stroke: strokeColor, strokeWidth: 1.5, strokeLinecap: "round", strokeLinejoin: "round" }),
        React.createElement("path", { d: "M17.075 12.5a7.5 7.5 0 11-1.767-7.8l3.859 3.633", stroke: strokeColor, strokeWidth: 1.5, strokeLinecap: "round", strokeLinejoin: "round" })));

    const ForceRefreshButton = ({ onClick, forceRefresh }) => {
        const classNames = forceRefresh
            ? "appsw__force-refresh-btn appsw__force-refresh-btn--disabled"
            : "appsw__force-refresh-btn";
        return (React.createElement("button", { className: classNames, onClick: onClick },
            React.createElement(ForceRefreshIcon, { strokeColor: "#FFF" })));
    };

    const AppList = ({ appList, setForceRefresh, forceRefresh }) => {
        const onSetForceRefresh = () => {
            setForceRefresh(true);
        };
        const displayAppList = () => {
            if (appList === undefined) {
                return null;
            }
            if (appList.length === 0) {
                return (React.createElement("div", { className: "appsw_list__not-found-wrapper" },
                    React.createElement("span", { className: "appsw_not-found-wrapper__message" }, "No apps found")));
            }
            return (React.createElement("div", { className: "appsw_list-wrapper" },
                React.createElement("div", { className: "appsw_title-wrapper" },
                    React.createElement("span", { className: "appsw_list__group-title" }, "Your apps"),
                    React.createElement("button", { className: "appsw__force-refresh-btn", onClick: onSetForceRefresh },
                        React.createElement(ForceRefreshButton, { onClick: onSetForceRefresh, forceRefresh: forceRefresh }))),
                appList.map((appData) => {
                    return React.createElement(AppLisItem, { data: appData, key: appData.appId });
                })));
        };
        return React.createElement("div", { className: "appsw_AppSwitcher__list" }, displayAppList());
    };

    const Footer = () => {
        // TODO: Change the logo path
        return (React.createElement("div", { className: "appsw_AppSwitcher__footer" },
            React.createElement("img", { className: "appsw_footer__logo", src: "./img/AppSwitcherModule$Images$Mendix_logo.svg" }),
            React.createElement("div", { className: "appsw_footer__text" },
                React.createElement("span", { className: "appsw_text__span" }, "Have an idea for an app?"),
                React.createElement("span", { className: "appsw_text__span" },
                    React.createElement("a", { className: "appsw_span__link", href: "https://new.mendix.com/link/overview/", target: "_blank", rel: "noreferrer" }, "Create an app"),
                    " ",
                    "or visit the",
                    " ",
                    React.createElement("a", { className: "appsw_span__link", href: "https://marketplace.mendix.com/", target: "_blank", rel: "noreferrer" }, "Marketplace")))));
    };

    /* eslint-disable no-unused-vars */
    const MF_CUSTOM_AUTHENTICATION = "AppSwitcherModule.DS_CustomAuthentication";
    var LoadingState;
    (function (LoadingState) {
        LoadingState["Idle"] = "idle";
        LoadingState["Fetching"] = "fetching";
        LoadingState["Complete"] = "complete";
        LoadingState["Failed"] = "failed";
    })(LoadingState || (LoadingState = {}));

    const SearchIcon = ({ strokeColor, width = 32, height = 32, className = "" }) => (React.createElement("svg", { width: width, height: height, className: className, viewBox: "0 0 24 24" },
        React.createElement("path", { stroke: strokeColor, fill: "transparent", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "1.5", d: "M14.406 18.573A7.874 7.874 0 108.246 4.08a7.874 7.874 0 006.16 14.493zM16.893 16.893L23 23.001" })));

    const SkeletonLoader = () => {
        const skeletonLoaderItems = [];
        for (let i = 0; i < 5; i++) {
            skeletonLoaderItems.push(React.createElement("div", { key: i, className: "appsw_skeleton-loader__app-item" },
                React.createElement("div", { className: "appsw_skeleton-loader__skeleton-box appsw_app-item__icon" }),
                React.createElement("div", { className: "appsw_app-item__name-wrapper" },
                    React.createElement("div", { className: "appsw_skeleton-loader__skeleton-box appsw_name-wrapper__name" })),
                React.createElement("div", { className: "appsw_skeleton-loader__skeleton-box appsw_app-item__link" })));
        }
        return (React.createElement("div", { className: "appsw_AppSwitcher__skeleton-loader" },
            React.createElement("div", { className: "appsw_skeleton-loader__skeleton-box appsw_skeleton-loader__group-title" }),
            skeletonLoaderItems));
    };

    const AppSwitcherContent = ({ appListResponse, appListLoadingState, setForceRefresh, authorizationError, forceRefresh, isOpen, positioning }) => {
        const [filteredAppList, setFilteredAppList] = React.useState();
        const [searchValue, setSearchValue] = React.useState("");
        React.useEffect(() => {
            setFilteredAppList(appListResponse);
        }, [appListResponse]);
        const onSearchChange = (event) => {
            const searchQuery = event.target.value;
            setSearchValue(event.target.value);
            if (searchQuery !== "") {
                const result = filterAppList(searchQuery);
                setFilteredAppList(result);
            }
            else {
                setFilteredAppList(appListResponse);
            }
        };
        const filterAppList = (searchQuery) => {
            return appListResponse !== undefined
                ? appListResponse.filter((result) => {
                    return result.appName.toLowerCase().includes(searchQuery.toLowerCase());
                })
                : [];
        };
        const classNames = `appsw_AppSwitcher__content ${positioning === "sidebarLeft" && isOpen ? "appsw_AppSwitcher__content--open" : ""}`;
        return (React.createElement("div", { className: classNames },
            React.createElement("input", { className: "appsw_content__search-input", type: "text", value: searchValue, onChange: onSearchChange, placeholder: "Search Apps", maxLength: 40 }),
            React.createElement(SearchIcon, { className: "appsw_search-input__icon", width: 22, height: 22, strokeColor: "#FFFFFF" }),
            appListLoadingState === LoadingState.Complete ? (React.createElement(AppList, { appList: filteredAppList, setForceRefresh: setForceRefresh, forceRefresh: forceRefresh })) : appListLoadingState === LoadingState.Failed || authorizationError ? (React.createElement("p", { className: "appsw_error-message" }, "No app here? No worries! Try to refresh the page or contact your admin.")) : (React.createElement(SkeletonLoader, null)),
            React.createElement(Footer, null)));
    };
    var AppSwitcherContent$1 = React__default["default"].memo(AppSwitcherContent);

    const SwitcherIcon = ({ dotsFillColor, width = 30, height = 30, className = "" }) => {
        return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: className, width: width, height: height, fill: "none", viewBox: "0 0 32 32" },
            React.createElement("path", { id: "switcherIconDots", fill: dotsFillColor, fillRule: "evenodd", clipRule: "evenodd", d: "M8 10a2 2 0 100-4 2 2 0 000 4zM8 18a2 2 0 100-4 2 2 0 000 4zM16 18a2 2 0 100-4 2 2 0 000 4zM24 18a2 2 0 100-4 2 2 0 000 4zM8 26a2 2 0 100-4 2 2 0 000 4zM16 26a2 2 0 100-4 2 2 0 000 4zM24 26a2 2 0 100-4 2 2 0 000 4zM16 10a2 2 0 100-4 2 2 0 000 4zM24 10a2 2 0 100-4 2 2 0 000 4z" })));
    };

    const ToggleButton = ({ onClick }) => {
        return (React.createElement("button", { className: "appsw_AppSwitcher__toggle-button", onClick: onClick },
            React.createElement(SwitcherIcon, { className: "appsw_togge-button__switcher-icon", dotsFillColor: "#FFFFFF" })));
    };

    const getCustomAuthToken = async () => {
        const result = new Promise((resolve, reject) => {
            window.mx.data.action({
                params: {
                    actionname: MF_CUSTOM_AUTHENTICATION
                },
                callback: (response) => {
                    const customAuthentication = JSON.parse(response);
                    resolve(customAuthentication);
                },
                error: e => {
                    reject(e);
                }
            });
        });
        return result;
    };

    const useFetchAppList = (isOpen, forceRefresh, baseURL) => {
        const [loadingState, setLoadingState] = React.useState(LoadingState.Idle);
        const [appList, setAppList] = React.useState([]);
        const [tokenIsValid, setTokenIsValid] = React.useState(false);
        const [authorizationError, setAuthorizationError] = React.useState(false);
        const [fetchCount, setFetchCount] = React.useState(0);
        const [timeStamp, setTimeStamp] = React.useState();
        const [authenticationData, setAuthenticationData] = React.useState();
        const shouldRefreshAuthToken = () => {
            if (!timeStamp || !authenticationData) {
                return true;
            }
            const now = new Date();
            const diffInSeconds = Math.round((now.getTime() - timeStamp.getTime()) / 1000);
            return diffInSeconds >= authenticationData.timeToLive || fetchCount >= authenticationData.timesToUse;
        };
        React.useEffect(() => {
            if (shouldRefreshAuthToken()) {
                setTokenIsValid(false);
                return;
            }
            if (isOpen) {
                fetchAppList();
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [authenticationData, forceRefresh, isOpen]); // Warning: fetchAppList can't be added as dependency because it will create a loop.
        React.useEffect(() => {
            if (!tokenIsValid) {
                getCustomAuthToken().then(customAuthentication => {
                    if (!customAuthentication.authorization) {
                        setAuthorizationError(true);
                        return;
                    }
                    setAuthenticationData(customAuthentication);
                    setFetchCount(0);
                    setTokenIsValid(true);
                    setTimeStamp(new Date());
                });
            }
        }, [tokenIsValid]);
        const fetchAppList = async () => {
            if (!authenticationData || !authenticationData.authorization || loadingState === LoadingState.Fetching) {
                return;
            }
            setLoadingState(LoadingState.Fetching);
            setFetchCount(fetchCount => fetchCount + 1);
            const url = `${baseURL}/users/${authenticationData.userId}/apps?refresh=${forceRefresh}`;
            const options = {
                method: "GET",
                headers: {
                    Authorization: authenticationData.authorization,
                    Accept: "application/json",
                    "Content-Type": "application/json"
                }
            };
            fetch(url, options)
                .then(response => {
                if (!response.ok || response.status >= 400) {
                    setTokenIsValid(false);
                    return;
                }
                const json = response.json();
                setLoadingState(LoadingState.Complete);
                return json;
            })
                .then(json => {
                if (json) {
                    setAppList(json);
                }
            })
                .catch(() => {
                setTokenIsValid(false);
                setLoadingState(LoadingState.Failed);
                console.error("AppSwitcher >> Invalid token. Please refresh it.");
            });
        };
        return { authorizationError, appListLoadingState: loadingState, appList };
    };

    const AppSwitcherContainer = (props) => {
        const [isOpen, setIsOpen] = React.useState(false);
        const ref = React.useRef(null);
        const [forceRefresh, setForceRefresh] = React.useState(false);
        const { appListLoadingState, appList, authorizationError } = useFetchAppList(isOpen, forceRefresh, props.baseUrl);
        const onToggle = () => {
            setIsOpen(!isOpen);
        };
        React.useEffect(() => {
            const onOutsideClick = (event) => {
                if (isOpen && ref.current && !ref.current.contains(event.target)) {
                    setIsOpen(false);
                    setForceRefresh(false);
                }
            };
            document.addEventListener("mousedown", onOutsideClick);
            return () => {
                document.removeEventListener("mousedown", onOutsideClick);
            };
        }, [isOpen]);
        const classNames = `appsw_AppSwitcher ${props.positioning === "sidebarLeft" ? "appsw_AppSwitcher--sidebar-left" : ""}`;
        return (React.createElement("div", { className: classNames, ref: ref },
            React.createElement(ToggleButton, { onClick: onToggle }),
            isOpen && (React.createElement(AppSwitcherContent$1, { appListResponse: appList, appListLoadingState: appListLoadingState, setForceRefresh: setForceRefresh, authorizationError: authorizationError, forceRefresh: forceRefresh, isOpen: isOpen, positioning: props.positioning }))));
    };

    class AppSwitcher extends React.Component {
        render() {
            return (React.createElement(AppSwitcherContainer, { baseUrl: this.props.baseUrl, positioning: this.props.positioning, name: "", class: "" }));
        }
    }

    return AppSwitcher;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
