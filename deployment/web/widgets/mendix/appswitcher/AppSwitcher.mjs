
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
function ___$insertStyle(css) {
    if (!css || typeof window === 'undefined') {
        return;
    }
    const style = document.createElement('style');
    style.setAttribute('type', 'text/css');
    style.innerHTML = css;
    document.head.appendChild(style);
    return css;
}

import React, { createElement, useState, useEffect, useRef, Component } from 'react';

const ExternalLinkIcon = ({ strokeColor, width = 20, height = 20, className = "" }) => (createElement("svg", { className: className, width: width, height: height, viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    createElement("path", { d: "M15 10.8333V15.8333C15 16.2754 14.8244 16.6993 14.5118 17.0118C14.1993 17.3244 13.7754 17.5 13.3333 17.5H4.16667C3.72464 17.5 3.30072 17.3244 2.98816 17.0118C2.67559 16.6993 2.5 16.2754 2.5 15.8333V6.66667C2.5 6.22464 2.67559 5.80072 2.98816 5.48816C3.30072 5.17559 3.72464 5 4.16667 5H9.16667", stroke: strokeColor, strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    createElement("path", { d: "M12.5 2.5H17.5V7.5", stroke: "white", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    createElement("path", { d: "M8.33337 11.6667L17.5 2.5", stroke: strokeColor, strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })));

const AppLisItem = ({ data }) => {
    return (createElement("a", { href: data.appURL, className: "appsw_list__link-wrapper" },
        createElement("div", { className: "appsw_list__item", key: data.appId },
            createElement("img", { className: "appsw_item__image", width: "20", height: "20", src: Object.prototype.hasOwnProperty.call(data, "appLogo")
                    ? data.appLogo
                    : "./img/AppSwitcherModule$Images$Mendix_logo.svg" }),
            createElement("span", { className: "appsw_item__name" }, data.appName),
            createElement("a", { href: data.appURL, className: "appsw_list__link-wrapper", target: "_blank", rel: "noreferrer" },
                createElement(ExternalLinkIcon, { className: "appsw_item__external-link", strokeColor: "#FFF" })))));
};

const ForceRefreshIcon = ({ strokeColor, width = 20, height = 20, className = "" }) => (createElement("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", width: width, height: height, className: className, viewBox: "0 0 20 20" },
    createElement("path", { d: "M19.167 3.333v5h-5", stroke: strokeColor, strokeWidth: 1.5, strokeLinecap: "round", strokeLinejoin: "round" }),
    createElement("path", { d: "M17.075 12.5a7.5 7.5 0 11-1.767-7.8l3.859 3.633", stroke: strokeColor, strokeWidth: 1.5, strokeLinecap: "round", strokeLinejoin: "round" })));

const ForceRefreshButton = ({ onClick, forceRefresh }) => {
    const classNames = forceRefresh
        ? "appsw__force-refresh-btn appsw__force-refresh-btn--disabled"
        : "appsw__force-refresh-btn";
    return (createElement("button", { className: classNames, onClick: onClick },
        createElement(ForceRefreshIcon, { strokeColor: "#FFF" })));
};

const AppList = ({ appList, setForceRefresh, forceRefresh }) => {
    const onSetForceRefresh = () => {
        setForceRefresh(true);
    };
    const displayAppList = () => {
        if (appList === undefined) {
            return null;
        }
        if (appList.length === 0) {
            return (createElement("div", { className: "appsw_list__not-found-wrapper" },
                createElement("span", { className: "appsw_not-found-wrapper__message" }, "No apps found")));
        }
        return (createElement("div", { className: "appsw_list-wrapper" },
            createElement("div", { className: "appsw_title-wrapper" },
                createElement("span", { className: "appsw_list__group-title" }, "Your apps"),
                createElement("button", { className: "appsw__force-refresh-btn", onClick: onSetForceRefresh },
                    createElement(ForceRefreshButton, { onClick: onSetForceRefresh, forceRefresh: forceRefresh }))),
            appList.map((appData) => {
                return createElement(AppLisItem, { data: appData, key: appData.appId });
            })));
    };
    return createElement("div", { className: "appsw_AppSwitcher__list" }, displayAppList());
};

const Footer = () => {
    // TODO: Change the logo path
    return (createElement("div", { className: "appsw_AppSwitcher__footer" },
        createElement("img", { className: "appsw_footer__logo", src: "./img/AppSwitcherModule$Images$Mendix_logo.svg" }),
        createElement("div", { className: "appsw_footer__text" },
            createElement("span", { className: "appsw_text__span" }, "Have an idea for an app?"),
            createElement("span", { className: "appsw_text__span" },
                createElement("a", { className: "appsw_span__link", href: "https://new.mendix.com/link/overview/", target: "_blank", rel: "noreferrer" }, "Create an app"),
                " ",
                "or visit the",
                " ",
                createElement("a", { className: "appsw_span__link", href: "https://marketplace.mendix.com/", target: "_blank", rel: "noreferrer" }, "Marketplace")))));
};

/* eslint-disable no-unused-vars */
const MF_CUSTOM_AUTHENTICATION = "AppSwitcherModule.DS_CustomAuthentication";
var LoadingState;
(function (LoadingState) {
    LoadingState["Idle"] = "idle";
    LoadingState["Fetching"] = "fetching";
    LoadingState["Complete"] = "complete";
    LoadingState["Failed"] = "failed";
})(LoadingState || (LoadingState = {}));

const SearchIcon = ({ strokeColor, width = 32, height = 32, className = "" }) => (createElement("svg", { width: width, height: height, className: className, viewBox: "0 0 24 24" },
    createElement("path", { stroke: strokeColor, fill: "transparent", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "1.5", d: "M14.406 18.573A7.874 7.874 0 108.246 4.08a7.874 7.874 0 006.16 14.493zM16.893 16.893L23 23.001" })));

const SkeletonLoader = () => {
    const skeletonLoaderItems = [];
    for (let i = 0; i < 5; i++) {
        skeletonLoaderItems.push(createElement("div", { key: i, className: "appsw_skeleton-loader__app-item" },
            createElement("div", { className: "appsw_skeleton-loader__skeleton-box appsw_app-item__icon" }),
            createElement("div", { className: "appsw_app-item__name-wrapper" },
                createElement("div", { className: "appsw_skeleton-loader__skeleton-box appsw_name-wrapper__name" })),
            createElement("div", { className: "appsw_skeleton-loader__skeleton-box appsw_app-item__link" })));
    }
    return (createElement("div", { className: "appsw_AppSwitcher__skeleton-loader" },
        createElement("div", { className: "appsw_skeleton-loader__skeleton-box appsw_skeleton-loader__group-title" }),
        skeletonLoaderItems));
};

const AppSwitcherContent = ({ appListResponse, appListLoadingState, setForceRefresh, authorizationError, forceRefresh, isOpen, positioning }) => {
    const [filteredAppList, setFilteredAppList] = useState();
    const [searchValue, setSearchValue] = useState("");
    useEffect(() => {
        setFilteredAppList(appListResponse);
    }, [appListResponse]);
    const onSearchChange = (event) => {
        const searchQuery = event.target.value;
        setSearchValue(event.target.value);
        if (searchQuery !== "") {
            const result = filterAppList(searchQuery);
            setFilteredAppList(result);
        }
        else {
            setFilteredAppList(appListResponse);
        }
    };
    const filterAppList = (searchQuery) => {
        return appListResponse !== undefined
            ? appListResponse.filter((result) => {
                return result.appName.toLowerCase().includes(searchQuery.toLowerCase());
            })
            : [];
    };
    const classNames = `appsw_AppSwitcher__content ${positioning === "sidebarLeft" && isOpen ? "appsw_AppSwitcher__content--open" : ""}`;
    return (createElement("div", { className: classNames },
        createElement("input", { className: "appsw_content__search-input", type: "text", value: searchValue, onChange: onSearchChange, placeholder: "Search Apps", maxLength: 40 }),
        createElement(SearchIcon, { className: "appsw_search-input__icon", width: 22, height: 22, strokeColor: "#FFFFFF" }),
        appListLoadingState === LoadingState.Complete ? (createElement(AppList, { appList: filteredAppList, setForceRefresh: setForceRefresh, forceRefresh: forceRefresh })) : appListLoadingState === LoadingState.Failed || authorizationError ? (createElement("p", { className: "appsw_error-message" }, "No app here? No worries! Try to refresh the page or contact your admin.")) : (createElement(SkeletonLoader, null)),
        createElement(Footer, null)));
};
var AppSwitcherContent$1 = React.memo(AppSwitcherContent);

const SwitcherIcon = ({ dotsFillColor, width = 30, height = 30, className = "" }) => {
    return (createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: className, width: width, height: height, fill: "none", viewBox: "0 0 32 32" },
        createElement("path", { id: "switcherIconDots", fill: dotsFillColor, fillRule: "evenodd", clipRule: "evenodd", d: "M8 10a2 2 0 100-4 2 2 0 000 4zM8 18a2 2 0 100-4 2 2 0 000 4zM16 18a2 2 0 100-4 2 2 0 000 4zM24 18a2 2 0 100-4 2 2 0 000 4zM8 26a2 2 0 100-4 2 2 0 000 4zM16 26a2 2 0 100-4 2 2 0 000 4zM24 26a2 2 0 100-4 2 2 0 000 4zM16 10a2 2 0 100-4 2 2 0 000 4zM24 10a2 2 0 100-4 2 2 0 000 4z" })));
};

const ToggleButton = ({ onClick }) => {
    return (createElement("button", { className: "appsw_AppSwitcher__toggle-button", onClick: onClick },
        createElement(SwitcherIcon, { className: "appsw_togge-button__switcher-icon", dotsFillColor: "#FFFFFF" })));
};

const getCustomAuthToken = async () => {
    const result = new Promise((resolve, reject) => {
        window.mx.data.action({
            params: {
                actionname: MF_CUSTOM_AUTHENTICATION
            },
            callback: (response) => {
                const customAuthentication = JSON.parse(response);
                resolve(customAuthentication);
            },
            error: e => {
                reject(e);
            }
        });
    });
    return result;
};

const useFetchAppList = (isOpen, forceRefresh, baseURL) => {
    const [loadingState, setLoadingState] = useState(LoadingState.Idle);
    const [appList, setAppList] = useState([]);
    const [tokenIsValid, setTokenIsValid] = useState(false);
    const [authorizationError, setAuthorizationError] = useState(false);
    const [fetchCount, setFetchCount] = useState(0);
    const [timeStamp, setTimeStamp] = useState();
    const [authenticationData, setAuthenticationData] = useState();
    const shouldRefreshAuthToken = () => {
        if (!timeStamp || !authenticationData) {
            return true;
        }
        const now = new Date();
        const diffInSeconds = Math.round((now.getTime() - timeStamp.getTime()) / 1000);
        return diffInSeconds >= authenticationData.timeToLive || fetchCount >= authenticationData.timesToUse;
    };
    useEffect(() => {
        if (shouldRefreshAuthToken()) {
            setTokenIsValid(false);
            return;
        }
        if (isOpen) {
            fetchAppList();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [authenticationData, forceRefresh, isOpen]); // Warning: fetchAppList can't be added as dependency because it will create a loop.
    useEffect(() => {
        if (!tokenIsValid) {
            getCustomAuthToken().then(customAuthentication => {
                if (!customAuthentication.authorization) {
                    setAuthorizationError(true);
                    return;
                }
                setAuthenticationData(customAuthentication);
                setFetchCount(0);
                setTokenIsValid(true);
                setTimeStamp(new Date());
            });
        }
    }, [tokenIsValid]);
    const fetchAppList = async () => {
        if (!authenticationData || !authenticationData.authorization || loadingState === LoadingState.Fetching) {
            return;
        }
        setLoadingState(LoadingState.Fetching);
        setFetchCount(fetchCount => fetchCount + 1);
        const url = `${baseURL}/users/${authenticationData.userId}/apps?refresh=${forceRefresh}`;
        const options = {
            method: "GET",
            headers: {
                Authorization: authenticationData.authorization,
                Accept: "application/json",
                "Content-Type": "application/json"
            }
        };
        fetch(url, options)
            .then(response => {
            if (!response.ok || response.status >= 400) {
                setTokenIsValid(false);
                return;
            }
            const json = response.json();
            setLoadingState(LoadingState.Complete);
            return json;
        })
            .then(json => {
            if (json) {
                setAppList(json);
            }
        })
            .catch(() => {
            setTokenIsValid(false);
            setLoadingState(LoadingState.Failed);
            console.error("AppSwitcher >> Invalid token. Please refresh it.");
        });
    };
    return { authorizationError, appListLoadingState: loadingState, appList };
};

const AppSwitcherContainer = (props) => {
    const [isOpen, setIsOpen] = useState(false);
    const ref = useRef(null);
    const [forceRefresh, setForceRefresh] = useState(false);
    const { appListLoadingState, appList, authorizationError } = useFetchAppList(isOpen, forceRefresh, props.baseUrl);
    const onToggle = () => {
        setIsOpen(!isOpen);
    };
    useEffect(() => {
        const onOutsideClick = (event) => {
            if (isOpen && ref.current && !ref.current.contains(event.target)) {
                setIsOpen(false);
                setForceRefresh(false);
            }
        };
        document.addEventListener("mousedown", onOutsideClick);
        return () => {
            document.removeEventListener("mousedown", onOutsideClick);
        };
    }, [isOpen]);
    const classNames = `appsw_AppSwitcher ${props.positioning === "sidebarLeft" ? "appsw_AppSwitcher--sidebar-left" : ""}`;
    return (createElement("div", { className: classNames, ref: ref },
        createElement(ToggleButton, { onClick: onToggle }),
        isOpen && (createElement(AppSwitcherContent$1, { appListResponse: appList, appListLoadingState: appListLoadingState, setForceRefresh: setForceRefresh, authorizationError: authorizationError, forceRefresh: forceRefresh, isOpen: isOpen, positioning: props.positioning }))));
};

class AppSwitcher extends Component {
    render() {
        return (createElement(AppSwitcherContainer, { baseUrl: this.props.baseUrl, positioning: this.props.positioning, name: "", class: "" }));
    }
}

export { AppSwitcher as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
